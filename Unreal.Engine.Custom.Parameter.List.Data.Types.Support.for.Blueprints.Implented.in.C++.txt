Bard:

Yes, custom data types are allowed for blueprint parameter lists implemented in C++ in Unreal Engine. To do this, you will need to create a USTRUCT class for your custom data type, and then register it with Unreal Engine. Once it is registered, you will be able to use your custom data type as a parameter type for blueprints.

To register your custom data type, you will need to add the following code to your C++ header file:

```C++
USTRUCT(BlueprintType)
struct FMyCustomDataType
{
    GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "My Custom Data Type")
    int32 Value;
};
```

Once you have registered your custom data type, you can use it as a parameter type for blueprints by adding it to the parameter list of a function or event graph node.

Here is an example of a blueprint function that takes a custom data type as a parameter:

```C++
UFUNCTION(BlueprintCallable, Category = "My Custom Data Type")
void MyFunction(FMyCustomDataType MyCustomData)
{
    // Do something with the custom data
}
```

You can then call this function from a blueprint by dragging it onto the event graph and connecting a custom data type variable to the input parameter.

It is important to note that custom data types for blueprint parameter lists must be serializable. This means that they must be able to be saved and loaded to disk. You can ensure that your custom data type is serializable by adding the `GENERATED_BODY()` macro to its declaration.

I hope this helps!
